worker_processes  1;

events {
    worker_connections  1024;
}

http {
    upstream reg_hosted {
        server registry-hosted:5000;
    }

    upstream reg_proxy {
        server registry-proxy:5000;
    }


    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;

    keepalive_timeout  65;
    client_max_body_size 0;  # TODO: limit the scope of this?

    log_format upstreamlog '$remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" handled by $server_name to upstream $proxy_host ($upstream_addr)';
    access_log /usr/local/openresty/nginx/logs/access.log upstreamlog;

    lua_shared_dict prometheus_metrics 10M;
    lua_package_path "/usr/local/openresty/site/lualib/?.lua";
    init_by_lua_block {
        prometheus = require("prometheus").init("prometheus_metrics")

        metric_requests = prometheus:counter(
            "nginx_http_requests_total", "Number of HTTP requests", {"host", "status", "method"}
        )

        metric_latency = prometheus:histogram(
            "nginx_http_request_duration_seconds", "HTTP request latency", {"host", "method"}
        )

        metric_connections = prometheus:gauge(
            "nginx_http_connections", "Number of HTTP connections", {"state"}
        )

        metric_proxy_pass = prometheus:counter(
            "nginx_proxy_pass", "Number of proxy passes", {"backend", "method"}
        )
    }
    log_by_lua_block {
        if ngx.var.uri ~= "/metrics" then
            metric_requests:inc(1, {ngx.var.server_name, ngx.var.status, ngx.var.request_method})
            metric_latency:observe(tonumber(ngx.var.request_time), {ngx.var.server_name, ngx.var.request_method})
            metric_proxy_pass:inc(1, {ngx.var.proxy_host, ngx.var.request_method})
        end
    }

    include /etc/nginx/conf.d/*.conf;
}
